#pragma once

#include <node.h>

using namespace v8;

#define node_def(funcname) \
void __##funcname(const v8::FunctionCallbackInfo<v8::Value> &args, v8::Isolate *isolate, v8::HandleScope &scope);\
inline void funcname(const v8::FunctionCallbackInfo<v8::Value> &args){\
  v8::Isolate *isolate = v8::Isolate::GetCurrent();\
  v8::HandleScope scope(isolate);\
  __##funcname(args, isolate, scope);\
}\
void __##funcname(const v8::FunctionCallbackInfo<v8::Value> &args, v8::Isolate *isolate, v8::HandleScope &scope)

#define node_error(message) isolate->ThrowException(v8::Exception::TypeError(message))
#define node_string(str) v8::String::NewFromUtf8(isolate, str)
#define node_wstring(str) v8::String::NewFromTwoByte(isolate, str)
#define node_return(val) args.GetReturnValue().Set(val)

#define node_module_init(modname) \
void __node_module_init(v8::Handle<v8::Object> exports);\
NODE_MODULE(modname, __node_module_init)\
void __node_module_init(v8::Handle<v8::Object> exports)

#define node_set_method(funcname, func) NODE_SET_METHOD(exports, funcname, func)